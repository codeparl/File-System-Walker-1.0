
package javaiodemo;

import java.awt.Color;
import java.awt.Cursor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import static java.lang.Math.random;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.SwingWorker;

/**
 *
 * @author HASSAN
 */
public class FileWalkerTest extends javax.swing.JFrame implements  PropertyChangeListener{

    
     private  HashMap<Long, Path >visitedFilesList;
     private Path dir;
     boolean  dirSelected =  false;
     private String[] options;
    private  StringBuilder  sb =  new StringBuilder();
     
    /**
     * Creates new form FileWalkerTest
     */
    public FileWalkerTest() {
        initComponents();
      visitedFilesList =  new HashMap<>();
        if(dirSelected)
        jTextField1.setEditable(true);
       else jTextField1.setEditable(false);
        options =  new String[3];
       
        progressBar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        selectBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        findBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FileSystemWalker 1.0");
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(153, 204, 255));
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
        );

        jLabel2.setText("Found: ");

        total.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        total.setText("0 files");

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Find Specified Files Only", "Find Folders Only", "Find Files And Folders", "Find All Files", "File Tree " }));
        comboBox.setFocusable(false);

        jLabel4.setText("Search Options");

        progressBar.setFocusable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(total)
                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        selectBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        selectBtn.setText("Select Drive or Folder");
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Search for: ");

        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setText("e.g *. {java,class,txt} or .java");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(selectBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(selectBtn, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        findBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        findBtn.setText("Find");
        findBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(findBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed


   JFileChooser  fc  =  new JFileChooser(System.getProperty("user.home"));
   fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
   int op =  fc.showOpenDialog(this);
      
    if(op  ==  JFileChooser.APPROVE_OPTION){
    dir =  fc.getSelectedFile().toPath();
    
    JTextArea   txt  =  new JTextArea();
  
    txt.setBackground(jTextArea1.getBackground());
    txt.setForeground(Color.YELLOW);
    txt.setFont(jTextArea1.getFont());
    txt.setBorder(BorderFactory.createEmptyBorder(4, 4, 0, 4));
       
       
    txt.setEditable(false);
        JViewport   port  = new JViewport();
                port.add(txt);

    jScrollPane1.setColumnHeaderView(port);
    
   
    
    txt.setText("Searching: "+dir.toString()+"\n"
            +insertLine());
    
    jTextField1.setEditable(true);
    dirSelected = true;
    if(sb.length() > 0)
        sb.delete(0, sb.length());
    }    
   
  

       
    }//GEN-LAST:event_selectBtnActionPerformed

    private String insertLine(){
    
    int w  =  jScrollPane1.getWidth()/2;
    StringBuilder  sb  =  new StringBuilder();
    for(int i = 1; i <= (w-10); ++i)
        sb.append("-");
    
    return sb.toString();
    
    }
    
    private void findBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findBtnActionPerformed
   
    sb.delete(0, sb.length());    
    progressBar.setIndeterminate(true);
    progressBar.setStringPainted(true);
    progressBar.setVisible(true);
    findBtn.setEnabled(false);
    selectBtn.setEnabled(false);
    comboBox.setEnabled(false);
    jTextField1.setEditable(false);  
    FileWalkerTest.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
   
     FileWalkTask  task  =  new FileWalkTask();    
     task.addPropertyChangeListener(this);
     task.execute();
     
     
   
   
        
      
         
    }//GEN-LAST:event_findBtnActionPerformed

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        System.err.println(evt.getPropertyName());
    if( "state".equals(evt.getPropertyName())){
    progressBar.setString("Searching...");
        
    
    
    }    
        
        
    }

    
   
    
    
    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained

String text  =  jTextField1.getText();
if(text == null || text.equals(""))
    return;
jTextField1.setForeground(Color.BLACK);
if(text.substring(0, 3).equals("e.g")){
   jTextField1.setText(null);
   jTextField1.setForeground(Color.BLACK);
  
}else {
 jTextField1.setForeground(new Color(153,153,153));
}


        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost

String text  =  jTextField1.getText();
if(text == null || text.equals("")){
    
    jTextField1.setText("e.g *.{java,class,txt}");
 jTextField1.setForeground(new Color(153,153,153));
}else{jTextField1.setForeground(Color.BLACK);}

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1FocusLost

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated



        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange

 
    

        // TODO add your handling code here:
    }//GEN-LAST:event_formPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileWalkerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileWalkerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileWalkerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileWalkerTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileWalkerTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JButton findBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton selectBtn;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables


    
    private class FileWalkTask  extends  SwingWorker<Void, Void>{

        
        
        @Override
        protected Void  doInBackground() throws Exception {
            
           
       
             String selectedVal =  (String) comboBox.getSelectedItem();
             String pattern  =  jTextField1.getText().trim();
          
          if("Find Specified Files Only".equals(selectedVal))  { 
             if(pattern.matches("\\*\\.\\{(\\w+)\\}")){
             pattern = jTextField1.getText().trim(); 
             }else if(pattern.matches("([a-zA-Z[0-9]])+")){
                 String text  = jTextField1.getText().trim(); 
                 pattern = "*.{"+text+"}";
             }
             
             else {
                 JOptionPane.showMessageDialog(FileWalkerTest.this, "Pattern syntax error", "Syntax Error", JOptionPane.ERROR_MESSAGE);
                   jTextField1.requestFocus();
                 jTextField1.setSelectionEnd(jTextField1.getText().length());
                 jTextField1.setSelectionStart(0);
               
                 return null;
             }
          }//end if 
       
     
        
             options[0] = pattern;
             options[1] =  selectedVal;
             FileFinder   finder  =  new FileFinder(jTextArea1,visitedFilesList, options);
             
        
             try {
             if(dir != null){
                 
               Files.walkFileTree(dir, finder);
               visitedFilesList =  finder.getVisitedFilesList();
             
             }//end if 
         } catch (IOException ex) {
         }
         
             
//      
//        for (Map.Entry<Long, Path> entry : visitedFilesList.entrySet()) {
//            Long key = entry.getKey();
//            Path value = entry.getValue();
//            
//            sb.append(key).append(key <= 9 ? ":   " : ":  ").append(value).append("\n");
//            
//     }
//       
//        jTextArea1.setText(sb.toString());
        
        long  x =finder.getTotalFiles();
         total.setText(x+(x > 1 ? " files" : " file"));
     
       return null;
        }
        
        
        

        @Override
        protected void done() {
            
        findBtn.setEnabled(true);
        selectBtn.setEnabled(true);
        comboBox.setEnabled(true);
        jTextField1.setEditable(true);  
        progressBar.setIndeterminate(false);
        progressBar.setVisible(false);
        FileWalkerTest.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        getToolkit().beep();
        
        
            
            
            
        }//end method 
    
    
    
    
    }//end class 



}
